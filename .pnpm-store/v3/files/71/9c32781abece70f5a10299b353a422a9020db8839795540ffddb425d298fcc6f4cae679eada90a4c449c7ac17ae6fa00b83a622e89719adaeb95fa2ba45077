import { dequal } from 'dequal/lite';
import { Configuration, RevalidatorOptions, Revalidator } from './types';
import Cache from './cache';
declare const cache: Cache;
declare function onErrorRetry(_: unknown, __: string, config: Readonly<Required<Configuration>>, revalidate: Revalidator, opts: Required<RevalidatorOptions>): void;
declare const defaultConfig: {
    readonly isOnline: () => boolean;
    readonly isDocumentVisible: () => boolean;
    readonly fetcher: (url: string) => Promise<any>;
    readonly registerOnFocus: (cb: () => void) => void;
    readonly registerOnReconnect: (cb: () => void) => void;
    readonly onLoadingSlow: () => void;
    readonly onSuccess: () => void;
    readonly onError: () => void;
    readonly onErrorRetry: typeof onErrorRetry;
    readonly errorRetryInterval: number;
    readonly focusThrottleInterval: number;
    readonly dedupingInterval: number;
    readonly loadingTimeout: number;
    readonly refreshInterval: 0;
    readonly revalidateOnFocus: true;
    readonly revalidateOnReconnect: true;
    readonly refreshWhenHidden: false;
    readonly refreshWhenOffline: false;
    readonly shouldRetryOnError: true;
    readonly suspense: false;
    readonly compare: typeof dequal;
    readonly isPaused: () => boolean;
};
export { cache };
export default defaultConfig;
